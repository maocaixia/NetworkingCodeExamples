package com.maxeler.examples.udpforwarding;

import com.maxeler.examples.udpforwarding.UdpForwardingTypes.DecisionRomStructType;
import com.maxeler.examples.udpforwarding.UdpForwardingTypes.EventsStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.udp.fastpath.types.UdpUniTxType;

public class UdpForwardingKernel extends Kernel {
	public static String INPUT = "inputFeed";
	public static String OUTPUT_CONSUMERS = "toConsumers";
	public static String OUTPUT_EVENTS_TO_CPU = "events";
    private final UdpForwardingTypes types;

	public UdpForwardingKernel(KernelParameters params, UdpForwardingTypes types) {
		super(params);

		flush.disabled();
		this.types = types;

		NonBlockingInput<DFEStruct> input = io.nonBlockingInput(INPUT,
		    types.inputFeedLinkType.getDFEStructType(),
		    types.inputFeedLinkType.getDFEStructType().getPositionForField(types.inputFeedLinkType.getEOF()));

		InputMessage inputMessage = processInputFeed(input);
		ConsumerDecision decision = makeDecision(inputMessage);

		io.output(OUTPUT_CONSUMERS, types.consumerLinkType.getDFEStructType(),
				inputMessage.valid & decision.shouldForward) <== genConsumerOutput(inputMessage, decision);

		io.output(OUTPUT_EVENTS_TO_CPU, types.eventType,
				inputMessage.isMessageStart) <== genCpuEvent(inputMessage, decision);
	}

	private DFEStruct genConsumerOutput(InputMessage inputMessage,	ConsumerDecision decision) {
		DFEStruct consumerLink = types.consumerLinkType.getDFEStructType().newInstance(this);

		consumerLink[types.consumerLinkType.getData()] <== inputMessage.data;
		consumerLink[types.consumerLinkType.getSOF()] <== inputMessage.sof;
		consumerLink[types.consumerLinkType.getEOF()] <== inputMessage.eof;
		consumerLink[types.consumerLinkType.getMod()] <== inputMessage.mod;
		consumerLink[UdpUniTxType.SOCKET] <== decision.targetConsumer;

		return consumerLink;
	}

	private DFEStruct genCpuEvent(InputMessage inputMessage, ConsumerDecision decision) {
		DFEStruct eventToCpu = types.eventType.newInstance(this);
		eventToCpu[EventsStructType.ForwardDecision] <== decision.shouldForward ?
					constant.var((DFEType)eventToCpu[EventsStructType.ForwardDecision].getType(), 1) :
					constant.var((DFEType)eventToCpu[EventsStructType.ForwardDecision].getType(), 0);
		eventToCpu[EventsStructType.ConsumerId] <== decision.targetConsumer;
		eventToCpu[EventsStructType.EventCount] <== inputMessage.messageCount;
		eventToCpu[EventsStructType.MessageType] <== inputMessage.messageType;
		eventToCpu[EventsStructType.Padding] <== constant.var((DFEType)eventToCpu[EventsStructType.Padding].getType(), 0);

		return eventToCpu;
	}

	private class ConsumerDecision {
		public DFEVar shouldForward;
		public DFEVar targetConsumer;
	}

	private ConsumerDecision makeDecision(InputMessage inputMessage) {
		ConsumerDecision theDecision = new ConsumerDecision();

		/*
		 * Decision will be made by looking up the messageType in a ROM.
		 */

		Memory<DFEStruct> decisionRom = mem.alloc(types.decisionRomStructType, 256);
		decisionRom.mapToCPU("decisionRom");
		DFEStruct decision = Reductions.streamHold(decisionRom.read(inputMessage.messageType), inputMessage.isMessageStart);

		theDecision.shouldForward = (DFEVar)decision.get(DecisionRomStructType.ShouldForward) !== 0;
		theDecision.targetConsumer = decision.get(DecisionRomStructType.ConsumerId);

		return theDecision;
	}


	private class InputMessage {
		public DFEVar messageCount;
		public DFEVar messageType;

		public DFEVar isMessageStart;

		public DFEVar valid;
		public DFEVar data;
		public DFEVar sof;
		public DFEVar eof;
		public DFEVar mod;
	}

	private InputMessage processInputFeed(NonBlockingInput<DFEStruct> input) {


		DFEStruct inputStruct = input.data;
		DFEVar inputValid = input.valid;
		DFEVar data = inputStruct.get(types.inputFeedLinkType.getData());
		DFEVar sof = inputStruct.get(types.inputFeedLinkType.getSOF());
		DFEVar eof = inputStruct.get(types.inputFeedLinkType.getEOF());
		DFEVar mod = inputStruct.get(types.inputFeedLinkType.getMod());

		/*
		 * Start of message marker
		 */
		DFEVar isMessageStart = inputValid & sof;

		/*
		 * Count the number of input packets
		 */
		DFEVar messageCount = control.count.makeCounter(
				control.count.makeParams(64)
					.withInitValue(0)
					.withEnable(isMessageStart)
				).getCount();


		/*
		 * Extract the message type from the packet.
		 * In this example, the message type is the value of byte at position 'messageTypeBytePosition' of the payload.
		 */
		int messageTypeBytePosition = 7;

		DFEVar messageType = Reductions.streamHold(getByte(data, messageTypeBytePosition), isMessageStart);

		InputMessage inputMessage = new InputMessage();
		inputMessage.valid = inputValid;
		inputMessage.data = data;
		inputMessage.sof = sof;
		inputMessage.eof = eof;
		inputMessage.mod = mod;
		inputMessage.messageCount = messageCount;
		inputMessage.messageType = messageType;
		inputMessage.isMessageStart = isMessageStart;


		return inputMessage;
	}

	private DFEVar getByte(DFEVar data, int offset) {
		int bytesPerWord = data.getType().getTotalBytes();

		int wordOffset = offset / bytesPerWord;
		int byteOffset = offset % bytesPerWord;

		// 8 bits in a byte...
		return stream.offset(data, wordOffset).slice(byteOffset * 8, 8).cast(dfeUInt(8));
	}


}
