package com.maxeler.examples.udpOneToOne;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.udp.fastpath.MaxUdpFastPath;
import com.maxeler.udp.fastpath.MaxUdpUniRx;
import com.maxeler.udp.fastpath.MaxUdpUniTx;

public class UdpOneToOneManager extends NetworkManager {

	public UdpOneToOneManager(final UdpOneToOneParameters params) {
		super(params.getEngineParams());

		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(params.hasStreamStatus()));

		Max4NetworkConnection connectionSrc = Max4NetworkConnection.QSFP_TOP_10G_PORT1;
		network_config.setEthernetMacType(EthernetMacType.LOW_LATENCY);
		MaxUdpUniRx udpRx = MaxUdpFastPath.createUniRx(this, "udpRx", connectionSrc);
		MaxUdpUniTx udpTx = MaxUdpFastPath.createUniTx(this, "udpTx", connectionSrc);

		final ManagerClock netClk = getNetworkClock(Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		pushDefaultClock(netClk);

		/*
		 * We need to use kernels to transform the RX & TX data, since otherwise the metadata will be lost.
		 * The kernels insert the metadata into the data field and extract it again before transmitting.
		 */

		final KernelBlock rxKernel = addKernel(new UdpOneToOneRxKernel(makeKernelParameters("RxKernel"), udpRx.getRxStreamType()));
		rxKernel.getInput(UdpOneToOneRxKernel.INPUT) <== udpRx.getRxStream();
		addFramedStreamToCPU("toCpu", UdpOneToOneRxKernel.OUTPUT_TYPE, 512, 512) <== rxKernel.getOutput(UdpOneToOneRxKernel.OUTPUT);

		final KernelBlock txKernel = addKernel(new UdpOneToOneTxKernel(makeKernelParameters("TxKernel"), udpTx.getTxStreamType()));
		txKernel.getInput(UdpOneToOneTxKernel.INPUT) <== addFramedStreamFromCPU("fromCpu", UdpOneToOneTxKernel.INPUT_TYPE);
		udpTx.getTxStream() <== txKernel.getOutput(UdpOneToOneTxKernel.OUTPUT);
	}

	public static void main(final String[] args) {
		final UdpOneToOneParameters params = new UdpOneToOneParameters(args);
		final UdpOneToOneManager manager = new UdpOneToOneManager(params);

		final BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}

}
