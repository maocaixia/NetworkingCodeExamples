package com.maxeler.examples.udpOneToOne;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.networking.v1.framed_kernels.ThroughputFramedKernel;
import com.maxeler.networking.v1.kernel_types.SimpleFramedLinkType;
import com.maxeler.udp.fastpath.types.UdpUniRxType;

public class UdpOneToOneRxKernel extends ThroughputFramedKernel {
	public static final String INPUT = "input";
	public static final String OUTPUT = "output";

	public static final SimpleFramedLinkType OUTPUT_TYPE = new SimpleFramedLinkType();

	public UdpOneToOneRxKernel(final KernelParameters params, UdpUniRxType inputType) {
		super(params);

		final NonBlockingInput<DFEStruct> src  = io.nonBlockingInput(
			INPUT,
			inputType.getDFEStructType(),
			constant.var(true),
			inputType.getDFEStructType().getPositionForField(inputType.getEOF()),
			DelimiterMode.EOF_POSITION,
			1,
			NonBlockingMode.NO_TRICKLING);

		final DFEStruct dataIn = src.data;
		final DFEVar inputValid = src.valid;

		/*
		 * Insert socket number as first data words (extend frame length by 1 cycle)
		 *
		 * Cycle 0 : Socket number (8 bits) & Padding (56 bits)
		 * Cycle 1 : Data word 0
		 * ..
		 * Cycle n+1 : Data word n
		 *
		 * This currently wastes 56 bits / frame.
		 * To fix this, re-align and shift the data, update the MOD entry on the final cycle & potentially set EOF a cycle earlier.
		 * This is not done here for clarity.
		 */

		final DFEVar sof = dataIn[inputType.getSOF()];
		final DFEVar insertMetadata = sof;
		final DFEVar metadata = (DFEVar)dataIn[UdpUniRxType.SOCKET] # constant.var(dfeRawBits(
				OUTPUT_TYPE.getDFEStructType().getTypeForField(OUTPUT_TYPE.getData()).getTotalBits() -
				inputType.getTypeForField(UdpUniRxType.SOCKET).getTotalBits()), 0);

		final DFEStruct out = OUTPUT_TYPE.getDFEStructType().newInstance(this);
		out[SimpleFramedLinkType.SOF] <== dataIn[inputType.getSOF()];
		out[SimpleFramedLinkType.EOF] <== stream.offset((DFEVar)dataIn[inputType.getEOF()] & inputValid, -1);
		out[SimpleFramedLinkType.MOD] <== stream.offset((DFEVar)dataIn[inputType.getMod()], -1);
		out[SimpleFramedLinkType.DATA] <== insertMetadata ? metadata : stream.offset((DFEVar)dataIn[inputType.getData()], -1);

		final DFEVar outputValid = inputValid | stream.offset(inputValid, -1);
		io.output(OUTPUT, out, OUTPUT_TYPE.getDFEStructType(), outputValid);
	}
}
